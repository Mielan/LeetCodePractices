// My first try. Just thought to trace if the parentheses is closed.
class Solution {
    public String removeOuterParentheses(String S) {
        int count = 0;
        String result = "";
        int start = 0;
        int end = 0;
        for(int i = 0; i < S.length(); i++){   
            if(count == 0 && S.charAt(i) == '(') start = i;
            if(S.charAt(i) == '(') {
                count++;
                
            } else {
                count--;
                if(count == 0) end = i;
            }
            
            if(count == 0 && S.charAt(i) == ')') {
                System.out.println(S.substring(start + 1, end));
                result = result + S.substring(start + 1, end);
            }
        }
        
        return result;        
    }
}

// However, there is obvious better ways. tracing the count for every char, we save lines of code. 
// Also, its is worth noting that when concating in a loop, using StringBuilder is way better that concate.

// FINAL SOLUTION
    public String removeOuterParentheses(String S) {
        StringBuilder s = new StringBuilder();
        int opened = 0;
        for (char c : S.toCharArray()) {
            if (c == '(' && opened++ > 0) s.append(c);
            if (c == ')' && opened-- > 1) s.append(c);
        }
        return s.toString();
    }
