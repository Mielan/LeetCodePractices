// 以为自己想得很清楚，其实没搞懂
import java.lang.Math;

class Solution {
    public int minFlipsMonoIncr(String S) {
        // 一共就两种方法，把出现第一个一之间与最后一个零之间，全换成1or0  // 错！！
        
        int first1 = S.length();
        int last0 = -1;
        int flag = 0;
        for (int i = 0; i < S.length(); i++){
            if(S.charAt(i) == '1'){
                first1 = i; 
                flag = 1;
                break;
            }
        }
        for (int i = S.length() - 1; i >= 0; i--){
            if(S.charAt(i) == '0'){
                last0 = i;
                flag = 1;
                break;
            }
        }
        if(flag == 0){
            return 0;
        }
        String need = S.substring(first1, last0 + 1);
        int count0 = 0;
        int count1 = 0;
        for(int i = 0; i < need.length(); i++){
            if(need.charAt(i) == '0'){
                count0++;
            } else {
                count1++;
            }
            
        }
        return Math.min(count0, count1);
               
               
    }
}

// 又一个天真的想法
import java.lang.Math;

class Solution {
    public int minFlipsMonoIncr(String S) {
        System.out.println(flipToOne(S.length() - 1, S));
        System.out.println(flipToZero(S.length() - 1, S));
        
        return Math.min(flipToOne(S.length() - 1, S), flipToZero(S.length() - 1, S));
    }
    
    public int flipToOne(int index, String S){
        if(index == 0){
            if(S.charAt(index) == '0'){
                return 0;
            }
            if(S.charAt(index) == '1'){
                return 1;
            }
        }
        if(S.charAt(index) == '0'){
            return 1 + Math.min(flipToOne(index - 1, S), flipToZero(index - 1, S));
        } else {
            return 0 + Math.min(flipToOne(index - 1, S), flipToZero(index - 1, S));
        }
    }
    public int flipToZero(int index, String S){
        if(index == 0){
            if(S.charAt(index) == '1'){
                return 0;
            }
            if(S.charAt(index) == '0'){
                return 1;
            }
        }
        if(S.charAt(index) == '0'){
            return 0 + Math.min(flipToOne(index - 1, S), flipToZero(index - 1, S));
        } else {
            return 1 + Math.min(flipToOne(index - 1, S), flipToZero(index - 1, S));
        }
    }
}

// 答案
class Solution {
    public int minFlipsMonoIncr(String S) {
        int N = S.length();
        int[] P = new int[N + 1];
        for (int i = 0; i < N; ++i)
            P[i+1] = P[i] + (S.charAt(i) == '1' ? 1 : 0);

        int ans = Integer.MAX_VALUE;
        for (int j = 0; j <= N; ++j) {
            ans = Math.min(ans, P[j] + N-j-(P[N]-P[j]));
        }

        return ans;
    }
}
